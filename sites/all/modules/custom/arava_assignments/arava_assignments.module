<?php


function arava_assignments_menu() {
  $items['assignment/%'] = array(
    'title callback' => 'arava_assignments_do_assignment_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_assignments_do_assignment_form', 1),
    'file' => 'arava_assignments.do.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'arava_assignments_do_assignment_access',
    'access arguments' => array(1),
  );

  return $items;
}

function arava_assignments_do_assignment_title($nid) {
  $node = node_load($nid);
  return $node->title;
}

function arava_assignments_do_assignment_access($nid) {
  $node = node_load($nid);
  $assignment_wrp = entity_metadata_wrapper('node', $node);
  $type = $assignment_wrp->field_assignment_type->value();
  $course = $assignment_wrp->field_course->value();
  $lesson = $assignment_wrp->field_lesson_num->value();
  global $user;

  // first, is the user signed up to the course?
  module_load_include('inc', 'arava_center', 'AravaCenterDbApi.class');
  $dbAPI = new AravaCenterDbApi();
  if (!$dbAPI->isUserSignedUpToCourse($user->uid, $course->nid)) {
    drupal_set_message(t('You are not signed up for this course (or did not complete your registration), so you cannot do this assignment'), 'warning');
    return false;
  }

  // then, make sure it is allowed:
  // homework and quizzes - if student was present / made up the class
  if ($type == 'homework' || $type == 'quiz') {
    $attended = $dbAPI->hasStudentAttendedClass($user->uid, $course->nid, $lesson);
    if (!$attended) {
      drupal_set_message(t('Our records show that you did not attend or make up this lesson, so you cannot do this assignment'), 'warning');
    }
    return $attended;
  }
  // tests - if all other assignments are complete
  // for the time being, we deem an assignment complete if a user began to answer it.
  else {
    // find any homework and quizzes for this course, which the user hadn't begun.
    module_load_include('inc', 'arava_assignments', 'AssignmentsAPI.class');
    $assignmentsAPI = new AssignmentsAPI();
    $incomplete = $assignmentsAPI->incompleteAssignmentsForCourse($course->nid);

    if (empty($incomplete)) {
      return true;
    }
    else {
      $missing = '';
      if (!empty($incomplete['homework'])) {
        $missing .= t('homework for lessons') . ' ' . implode(' ,', $incomplete['homework']) . ', ';
      }
      if (!empty($incomplete['quiz'])) {
        $missing .= t('quizzes for lessons') . ' ' . implode(' ,', $incomplete['quiz']);
      }
      drupal_set_message(t('You must complete these before taking the final test:') . ' ' . $missing, 'warning');
      return false;
    }
  }
}

/**
 * Helper function for auto-setting an assignment node title
 * @param $node
 * @return string
 */
function _arava_assignments_assignment_node_title($node) {
  $node_wrp = entity_metadata_wrapper('node', $node);
  $course = $node_wrp->field_course->title->value();
  $assignment_type = $node_wrp->field_assignment_type->value();
  $lesson_num = $node_wrp->field_lesson_num->value();

  $assignment_type_field_info = field_info_field('field_assignment_type');

  $title = $course . ' - ' . $assignment_type_field_info['settings']['allowed_values'][$assignment_type];
  if (!empty($lesson_num)) {
    $title .= ' - ' . $lesson_num;
  }
  return $title;
}

/**
 * Implements hook_block_info
 * @return mixed
 */
function arava_assignments_block_info() {
  $blocks['course_assignments'] = array(
    'info' => t('Course Assignments'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 * @param string $delta
 * @return mixed
 */
function arava_assignments_block_view($delta = '') {
  switch ($delta) {
    case 'course_assignments':
      $block['subject'] = t('Assignments');
      $block['content'] = _arava_assignments_course_assignments();
      break;
  }

  return $block;
}

/**
 * Callback for course_assignments block.
 * This block should be placed on a page where the assignment is the main object.
 */
function _arava_assignments_course_assignments() {
  $course = menu_get_object('node');
  if (!empty($course) && $course->type == 'course') {
    module_load_include('inc', 'arava_assignments', 'AssignmentsAPI.class');
    $assignmentsAPI = new AssignmentsAPI();
    $assignments = $assignmentsAPI->getAssignmentsListForCourse($course->nid);

    $map = array(
      'homework' => t('Homework'),
      'quiz' => t('Quiz'),
      'finaltest' => t('Final Test'),
    );

    $rows = array();
    foreach ($assignments as $key => $values) {
      $rows[] = array($map[$key], '');
      foreach ($values as $assignment) {
        $rows[] = array(
          l($map[$key] . ' ' . $assignment['lesson_num'], 'assignment/' . $assignment['assignment_id'], array('attributes' => array('target' => '_blank'))),
          $assignment['completion'] ? t('Started') : t('Not Started'),
        );
      }
    }

    $headers = array(t('Assignment'), '');

    return theme('table', array('header' => $headers, 'rows' => $rows));
  }

}

function arava_assignments_page_build(&$page) {
  $node = menu_get_object('node');
  if (!empty($node) && $node->type == 'course') {
    $block = module_invoke('arava_assignments', 'block_view', 'course_assignments');
    $blocks['course_assignments'] = array(
      'title' => $block['subject'],
      '#markup' => $block['content'],
      '#weight' => -10,
    );
    $page['content'] = array_merge($page['content'], $blocks);
  }
}