<?php

/**
 * Implements hook_menu().
 * @return mixed
 */
function arava_registration_menu() {

  /**
   * Registration steps
   */
  $items['registration/course'] = array(
		'title' => t('Course Selection'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('arava_registration_course'),
		'access arguments' => array('signup to courses and accommodation'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'arava_registration.courses.inc'
	);

  $items['registration/course/%/%'] = array(
		'title' => t('Course Selection'),
		'page callback' => 'arava_registration_course_ajax',
    'page arguments' => array(2, 3),
    'access arguments' => array('signup to courses and accommodation'),
		'type' => MENU_CALLBACK,
		'file' => 'arava_registration.courses.inc'
	);

	$items['registration/accommodation'] = array(
		'title' => t('Accomodation Selection'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('arava_registration_accommodation'),
    'access arguments' => array('signup to courses and accommodation'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'arava_registration.accommodation.inc'
	);

  $items['registration/presence'] = array(
    'title' => t('Presence Info'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_presence'),
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.presence.inc'
  );

  $items['registration/meals'] = array(
    'title' => t('Meals Info'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_meals'),
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.meals.inc'
  );

  $items['registration/extra'] = array(
    'title' => t('Extra Info'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_extra'),
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.extra.inc'
  );
  $items['registration/extra/agreed'] = array(
    'title' => t('Agreed'),
    'page callback' => 'arava_registration_save_agreement',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_CALLBACK,
    'file' => 'arava_registration.extra.inc'
  );

  $items['registration/confirm'] = array(
    'title' => t('Confirm Registration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_confirmation'),
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.confirm.inc'
  );

  $items['registration/payment'] = array(
    'title' => t('Payment'),
    'page callback' => 'arava_registration_payment_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.payment.inc'
  );
  $items['registration/remaining_payment'] = array(
    'title' => t('Remaining Payment'),
    'page callback' => 'arava_registration_remaining_payment_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.remaining_payment.inc'
  );
  $items['registration/thanks'] = array(
    'title' => t('Thanks'),
    'page callback' => 'arava_registration_thanks_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.thanks.inc'
  );
  $items['registration/thanks-confirmed'] = array(
    'title' => t('Thanks'),
    'page callback' => 'arava_registration_thanks_confirmed_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.thanks.inc'
  );

  $items['my_timetable'] = array(
    'title' => t('My Timetable'),
    'page callback' => 'arava_registration_timetable_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.my_timetable.inc'
  );

  $items['semester-timetable'] = array(
    'title' => t('Catalog Calendar'),
    'page callback' => 'arava_registration_semester_timetable_page',
    'access callback' => true,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.semester_timetable.inc'
  );

  /**
   * Configurations
   */
  $items['admin/arava-center'] = array(
    'title' => t('Arava Config'),
    'page callback' => 'arava_registration_config',
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );
  $items['admin/arava-center/general'] = array(
    'title' => t('Arava General'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_general_settings'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );

  $items['admin/arava-center/takanon-links'] = array(
    'title' => t('Arava Takanon links'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_takanon_links'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );

  $items['admin/arava-center/emails'] = array(
    'title' => t('Arava Emails'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_emails'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );

  $items['admin/arava-center/texts'] = array(
    'title' => t('Arava Texts'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_texts'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );


  return $items;
}

/**
 * access callback function:
 * allow access to pages if user has the permission and has not completed registration yet
 */
function arava_registration_access() {
  $permission = user_access('signup to courses and accommodation');

  module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
  $mySemesterAPI = new MySemesterAPI();
  $registration_complete = $mySemesterAPI->getComplete();

  return $permission && !$registration_complete;
}

/**
 * Implements hook_permission().
 */
function arava_registration_permission() {
	return array(
		'signup to courses and accommodation' => array(
			'title' => t('Signup to courses and accommodation'),
		)
	);
}

function arava_registration_init() {
  if (arg(0) == 'user' || arg(0) == 'registration' || arg(0) == 'semester-timetable') {
    drupal_add_library('system', 'ui.dialog');
    $path = drupal_get_path('module', 'arava_registration');
    drupal_add_js($path . '/js/arava_registration.js');
  }
}

/**
 * Implements hook_node_presave($node)
 * @param $node
 */
function arava_registration_node_presave($node) {
  if ($node->type == 'my_semester') {
    // keep payment due up-to-date
    module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
    $mySemesterAPI = new MySemesterAPI($node->field_user[LANGUAGE_NONE][0]['target_id'], $node);
    $payment_due = $mySemesterAPI->updatePaymentDueTotal($node);
    $node->field_payment_total[LANGUAGE_NONE][0]['value'] = $payment_due;
  }

  if ($node->type == 'semester') {
    // send email when semester is approved for paying accomodation
    $new_approved_value = $node->field_approved_pay_accomodation[LANGUAGE_NONE][0]['value'];
    $original = $node->original;
    $old_approved_value = $original->field_approved_pay_accomodation[LANGUAGE_NONE][0]['value'];
    if ($new_approved_value == '1' && $old_approved_value == '0') {
      // make sure this is the current semester
      module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
      $mySemesterAPI = new MySemesterAPI();
      $current_semester_id = $mySemesterAPI->getSemesterId();
      if ($current_semester_id == $node->nid) {
        // get all users who are signed up and have a remaining payment
        $emails = _arava_registration_get_users_with_remaining_payment($node->nid);
        foreach ($emails as $email) {
          drupal_mail('arava_registration', 'approved_pay_accomodation', $email['email'], $email['lang'], $params = array('name' => $email['name']));
        }
      }
    }
  }
}

function _arava_registration_get_users_with_remaining_payment($semester_id) {
  $result = db_query("SELECT user.mail, user.language, name.field_user_name_value
 											FROM field_data_field_user user_ref
 											INNER JOIN field_data_field_semester semester ON user_ref.entity_id = semester.entity_id
 											INNER JOIN users user ON user_ref.field_user_target_id = user.uid
 											INNER JOIN field_data_field_payment_total due ON user_ref.entity_id = due.entity_id
 											INNER JOIN field_data_field_payment_made payed ON user_ref.entity_id = payed.entity_id
 											INNER JOIN field_data_field_user_name name ON user.uid = name.entity_id
											WHERE field_semester_target_id = " . $semester_id . "
											AND due.field_payment_total_value > payed.field_payment_made_value");
  $emails = array();
  foreach ($result as $row) {
    $emails[] = array(
      'email' => $row->mail,
      'name' => $row->field_user_name_value,
      'lang' => $row->language,
    );
  }
  return $emails;
}

/**
 * Implements hook_user_login
 * @param $edit
 * @param $account
 *
 * If the user who just signed in has no courses for this semester yet, redirect them to sign up for some courses.
 * Shamelessly adapted form login_destination module
 */
function arava_registration_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
    $mySemesterAPI = new MySemesterAPI();
    $courses = $mySemesterAPI->getAllCoursesForUser();
    if (empty($courses)) {
      $GLOBALS['destination'] = 'registration/course';
    }
  }
}

/**
 * Implements hook_drupal_goto_alter
 * Shamelessly copied form login_destination module
 */
function arava_registration_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if (isset($GLOBALS['destination'])) {
    $destination = $GLOBALS['destination'];

    // alter drupal_goto
    if (is_array($destination)) {
      $path = $destination[0];
      $options = array();
      if (count($destination) > 1) {
        $options = $destination[1];
      }
    }
    else {
      $path = $destination;
    }
  }
}

/**
 * Implements hook_block_info
 * @return mixed
 */
function arava_registration_block_info() {
  $blocks['registration_steps'] = array(
    'info' => t('Registration steps'),
  );

  $blocks['semester_timetable'] = array(
    'info' => t('Semester timetable'),
  );

  $blocks['edit_my_semester'] = array(
    'info' => t('Edit my semester'),
  );

  $blocks['remaining_payment'] = array(
    'info' => t('Remaining payment'),
  );

  $blocks['my_messages'] = array(
    'info' => t('My messages'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view
 * @param string $delta
 * @return mixed
 */
function arava_registration_block_view($delta = '') {
  switch ($delta) {
    case 'registration_steps':
      $block['subject'] = null;
      $block['content'] = _arava_registration_steps_block();
      break;

    case 'semester_timetable':
      $block['subject'] = null;
      $block['content'] = _arava_registration_generate_all_timetables('page_1');
      break;

    case 'edit_my_semester':
      $block['subject'] = null;
      $block['content'] = t('To edit your courses for this semester, ') . l(t('click here'), 'registration/course') . ".";
      break;

    case 'remaining_payment':
      $block['subject'] = null;
      $block['content'] = _arava_payment_remaining_block();
      break;

    case 'my_messages':
      $block['subject'] = null;
      $block['content'] = t('You have no messages.');
      break;
  }

  return $block;
}

/**
 * Render the "registration steps" block
 */
function _arava_registration_steps_block() {
  $links = array(
    'user' => array(
      'title' => t('Personal information'),
      'href' => 'user',
    ),
    'courses' => array(
      'title' => t('Curriculum'),
      'href' => 'registration/course',
    ),
    'accommodation' => array(
      'title' => t('Accommodation'),
      'href' => 'registration/accommodation',
    ),
    'presence' => array(
      'title' => t('Presence days'),
      'href' => 'registration/presence',
    ),
    'carpoolingpref' => array(
      'title' => t('Car Pooling'),
      'href' => 'registration/carpooling-pref',
    ),
    'meals' => array(
      'title' => t('Meals'),
      'href' => 'registration/meals',
    ),
    'extra' => array(
      'title' => t('Extra info'),
      'href' => 'registration/extra',
    ),
    'confirm' => array(
      'title' => t('Confirm registration'),
      'href' => 'registration/confirm',
    ),
//    'payment' => array(
//      'title' => t('Payment'),
//      'href' => 'registration/payment',
//    ),
  );

  $disabled = !arava_registration_access();
  if ($disabled) {
    foreach ($links as $key => $link) {
      if ($key != 'user' && $key != 'courses') {
        unset ($links[$key]['href']);
      }
    }
  }

  return theme_links(array(
    'links' => $links,
    'attributes' => array(),
    'heading' => array(
      'text' => t('Registration Steps'),
      'level' => 'h3',
      'class' => array('element-invisible'),
    )
  ));
}

function _arava_payment_remaining_block() {
  module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
  $MySemesterApi = new MySemesterAPI();
  $remaining = $MySemesterApi->getPaymentDue();

  if ($remaining > 0) {
    $output = t('You have a sum of @sum shekels that needs to be payed. Please ', array('@sum' => $remaining)) . l(t('click here'), 'registration/remaining_payment') . t(' to pay it.');
    $output = '<span class="pay-up">' . $output . '</span>';
    return $output;
  }
  return t('You have paid all that is required at this point (if you have not yet been asked to pay for the room, you might see
            a different message here in the future).');
}

/**
 * get a view and separate its html into "above", "rows" and "below"
 * @param $view
 * @param $display
 */
function _arava_registration_get_separated_view($view, $display) {
  $view = _arava_registration_generate_view($view, $display);
  $view_parts = explode('<!--rows start-->', $view);
  $above = $view_parts[0];
  $view_parts = explode('<!--rows end-->', $view_parts[1]);
  $below = $view_parts[1];
  $rows = explode('<!--new row-->', $view_parts[0]);
  unset($rows[0]);
  return array(
    'above' => $above,
    'below' => $below,
    'rows' => $rows,
  );
}

/**
 * get a view and separate its html into "above", sections of "rows" and "below"
 * @param $view
 * @param $display
 */
function _arava_registration_get_separated_sectioned_view($view, $display) {
  $view = _arava_registration_generate_view($view, $display);

  $view_parts = explode('<!--section starts-->', $view, 2);
  $above = $view_parts[0];
  $view_parts = explode('<!--rows end-->', $view_parts[1]);
  $below = array_pop($view_parts);

  $separated_sections = array();
  foreach ($view_parts as $section) {
    $section = str_replace('<!--section starts-->', '', $section);

    $section_parts = explode('<!--rows start-->', $section);
    $section_above = $section_parts[0];

    $section_rows = explode('<!--new row-->', $section_parts[1]);
    unset($section_rows[0]);
    $separated_sections[] = array(
      'above' => $section_above,
      'rows' => $section_rows,
    );
  }
  $rows = $separated_sections;


  return array(
    'above' => $above,
    'below' => $below,
    'rows' => $rows,
  );
}

/**
 * @param $view_name
 * @param $display_name
 * @return mixed
 */
function _arava_registration_generate_view($view_name, $display_name, $args = array()) {
	$view = views_get_view($view_name);
	$view->set_display($display_name);
	$view->pre_execute($args);
	return $view->render();
}

function _arava_registration_generate_all_timetables($display) {
  global $user;
  module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
  $MySemesterApi = new MySemesterAPI();
  $semester_id = $MySemesterApi->getSemesterId();
  $semester = entity_metadata_wrapper('node', node_load($semester_id));

  $semester_dates = $semester->field_semester_dates->value();
  $start_year = date('Y', $semester_dates['value']);
  $start_month = date('n', $semester_dates['value']);
  $end_month = date('n', $semester_dates['value2']);
  $months = array();
  while ($start_month <= $end_month) {
    $months[] = $start_month;
    $start_month++;
  }

  $new_year = false;
  $output = '';
  foreach ($months as $key => $month) {
    if ($month == '1' && $key > 0 && !$new_year) {
      $start_year++;
      $new_year = true;
    }
    $date = $start_year . '-' . $month;
    $args = array(
      $date,
      $user->uid,
    );
    $calendar = _arava_registration_generate_view('calendar', $display, $args);
    $output .= $calendar;
  }

  return $output;
}

/**
 *
 */
function _arava_registration_days_of_week_options() {
  return array(
    'sunday' => t('Sunday'),
    'monday' => t('Monday'),
    'tuesday' => t('Tuesday'),
    'wednesday' => t('Wednesday'),
    'thursday' => t('Thursday'),
    'friday' => t('Friday'),
    'saturday' => t('Saturday'),
  );
}



function arava_registration_mail($key, &$message, $params) {
  switch ($key) {
    case 'confirmation':
      $message['subject'] = variable_get('arava_center_registration_confirmation_email_subject', '');
      $message['body'][] = _arava_registration_confirmation_email();
      break;

    case 'accomodation_confirmation':
      $message['subject'] = variable_get('arava_center_registration_accomodation_confirmation_email_subject', '');
      $message['body'][] = _arava_registration_accomodation_confirmation_email();
      break;

    case 'payment_received':
      $message['subject'] = variable_get('arava_center_registration_payment_received_email_subject', '');
      $message['body'][] = _arava_registration_payment_received_email($params['sum'], $params['confirmation_code'], $params['num_payments']);
      break;

    case 'approved_pay_accomodation':
      $message['subject'] = variable_get('arava_center_registration_approved_pay_accomodation_email_subject', '');
      $message['body'][] = _arava_registration_approved_pay_accomodation_email($params['name']);
      break;
  }
}

function _arava_registration_approved_pay_accomodation_email($name) {
  $output = '<div style="direction:rtl; text-align: right">';

  $output .= t('Hello @you,', array('@you' => _get_user_first_name($name))) . "<br><br>";

  $body = variable_get('arava_center_registration_approved_pay_accomodation_email', '');
  $output .= $body['value'] . "<br><br>";

  $output .= t('Best regards,') . "<br>";
  $output .= t('The Moar team');

  $output .= '</div>';

  return $output;
}

/**
 * Used in the courses view to print the lesson times so that js validation can happen
 * @param $data
 */
function _arava_registration_print_lesson_times($data) {
  $lesson_times = $data->field_field_lesson_times;
  $times = array();
  if (!empty($lesson_times)) {
    foreach ($lesson_times as $time) {
      $times[] = array(
        'course_id' => $data->nid,
        'course_name' => $data->node_title,
        'start' => $time['raw']['value'],
        'end' => $time['raw']['value2'],
      );
    }
  }
  print json_encode($times);
}

function _get_user_first_name($fullname) {
  $fullname = trim($fullname);
  $parts = explode(' ', $fullname);
  return $parts[0];
}

function _arava_registration_validate_all_registration() {
  $missing = array();

  module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
  $mySemesterAPI = new MySemesterAPI();

  // at least one course
  $courses = $mySemesterAPI->getAllCoursesForUser();
  if (empty($courses)) {
    $missing[] = t('Courses - please choose at least one course.');
  }

  // accommodation
  $accommodation = $mySemesterAPI->getAccomodationForUser();
  if ($accommodation == null) {
    $missing[] = t('Accommodation - please choose your accommodation.');
  }

  // extra info
  $extra = $mySemesterAPI->getExtraInfoForUser();
  unset($extra['comments']);
  $required = array('takanon_moa' => true,);

  foreach ($extra as $key => $info) {
    if (isset($required[$key]) && $required[$key] && !$info) {
      $missing[] = t('Extra info - please sign all the takanons.');
      break;
    }
  }

  return $missing;
}