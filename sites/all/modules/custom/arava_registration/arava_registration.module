<?php

/**
 * Implements hook_menu().
 * @return mixed
 */
function arava_registration_menu() {

	$items['course-selection'] = array(
		'title' => t('Course Selection'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('arava_registration_course_selection'),
		'access arguments' => array('signup to courses and accomodation'),
		'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}

/**
 * Implements hook_permission().
 */
function arava_registration_permission() {
	return array(
		'signup to courses and accomodation' => array(
			'title' => t('Signup to courses and accomodation'),
		)
	);
}

/**
 * Page callback for course-selection
 */
function arava_registration_course_selection($form, &$form_state) {

	$view = _arava_registration_generate_view('course_selection', 'block_1');
	$view_parts = explode('<!--rows start-->', $view);
	$above = $view_parts[0];
	$view_parts = explode('<!--rows end-->', $view_parts[1]);
	$below = $view_parts[1];
	$rows = explode('<!--new row-->', $view_parts[0]);
	unset($rows[0]);

	module_load_include('inc', 'arava_orders', 'OrdersAPI.class');
	$ordersAPI = new OrdersAPI();
	$selected = $ordersAPI->getAllOrdersForUser('course', _get_current_semester());

	$form['#tree'] = true;

	$form['above'] = array(
		'#markup' => $above,
	);

	$form['courses'] = array(
		'#type' => 'fieldset',
		'#collapsible' => false,
	);
	foreach ($rows as $row) {
		preg_match('/nid:[0-9]+/', $row, $matches);
		$nid = str_replace('nid:', '', $matches[0]);
		$form['courses'][$nid] = array(
			'#type' => 'fieldset',
			'#collapsible' => false,
			'checkbox' => array(
				'#type' => 'checkbox',
				'#default_value' => in_array($nid, $selected) ? 1 : 0,
			),
			'info' => array(
				'#markup' => $row,
			)
		);
	}

	$form['below'] = array(
		'#markup' => $below,
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);

	return $form;
}

function _arava_registration_generate_view($view_name, $display_name) {
	$view = views_get_view($view_name);
	$view->set_display($display_name);
	$view->pre_execute();
	return $view->render();
}

function arava_registration_course_selection_validate($form, &$form_state) {
	// validate that hours don't collide

	// validate that user hasn't unchecked courses they've already paid for
}

function arava_registration_course_selection_submit($form, &$form_state) {

	$selected = array();
	foreach ($form_state['values']['courses'] as $course_id => $course) {
		if ($course['checkbox'] == 1) {
			$selected[] = $course_id;
		}
	}

	module_load_include('inc', 'arava_orders', 'OrdersAPI.class');
	$ordersAPI = new OrdersAPI();

	// get the courses this user is already signed up for
	$curr_orders = $ordersAPI->getAllOrdersForUser('course', _get_current_semester());

	// add new ones
	foreach ($selected as $course) {
		if (!in_array($course, $curr_orders)) {
			$ordersAPI->addOrderItem($course);
		}
	}

	// remove any removed ones
	foreach ($curr_orders as $course) {
		if (!in_array($course, $selected)) {
			$ordersAPI->cancelOrderItem($course);
		}
	}

	// redirect
	$form_state['redirect'] = array('accomodation-selection');
}

function _get_current_semester() {
	$query = db_query(" SELECT open.entity_id AS entity_id
											FROM field_data_field_open_for_registration open
											WHERE field_open_for_registration_value = 1");
	foreach ($query as $row) {
		$result = $row->entity_id; // override to get the latest open semester, just in case.
	}
	return $result;
}