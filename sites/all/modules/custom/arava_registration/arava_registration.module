<?php

/**
 * Implements hook_menu().
 * @return mixed
 */
function arava_registration_menu() {

  /**
   * Registration steps
   */
  $items['registration/course'] = array(
		'title' => t('Course Selection'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('arava_registration_course'),
		'access arguments' => array('signup to courses and accommodation'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'arava_registration.courses.inc'
	);

	$items['registration/accommodation'] = array(
		'title' => t('Accomodation Selection'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('arava_registration_accommodation'),
		'access arguments' => array('signup to courses and accommodation'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'arava_registration.accommodation.inc'
	);

  $items['registration/meals'] = array(
    'title' => t('Meals Info'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_meals'),
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.meals.inc'
  );

  $items['registration/extra'] = array(
    'title' => t('Extra Info'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_extra'),
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.extra.inc'
  );
  $items['registration/payment'] = array(
    'title' => t('Payment'),
    'page callback' => 'arava_registration_payment_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.payment.inc'
  );
  $items['registration/remaining_payment'] = array(
    'title' => t('Remaining Payment'),
    'page callback' => 'arava_registration_remaining_payment_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.remaining_payment.inc'
  );
  $items['registration/thanks'] = array(
    'title' => t('Thanks'),
    'page callback' => 'arava_registration_thanks_page',
    'access arguments' => array('signup to courses and accommodation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.thanks.inc'
  );

  /**
   * Configurations
   */
  $items['admin/arava-center'] = array(
    'title' => t('Arava Config'),
    'page callback' => 'arava_registration_config',
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );
  $items['admin/arava-center/general'] = array(
    'title' => t('Arava General'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_general_settings'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );

  $items['admin/arava-center/takanon-links'] = array(
    'title' => t('Arava Takanon links'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_takanon_links'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );

  $items['admin/arava-center/emails'] = array(
    'title' => t('Arava Emails'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_emails'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );

  $items['admin/arava-center/texts'] = array(
    'title' => t('Arava Texts'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_registration_texts'),
    'access arguments' => array('administer menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_registration.admin.inc'
  );

	return $items;
}

/**
 * Implements hook_permission().
 */
function arava_registration_permission() {
	return array(
		'signup to courses and accommodation' => array(
			'title' => t('Signup to courses and accommodation'),
		)
	);
}

/**
 * Implements hook_node_presave($node)
 * @param $node
 */
function arava_registration_node_presave($node) {
  if ($node->type == 'my_semester') {
    // keep payment due up-to-date
    module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
    $mySemesterAPI = new MySemesterAPI($node->field_user[LANGUAGE_NONE][0]['target_id'], $node);
    $payment_due = $mySemesterAPI->updatePaymentDueTotal($node);
    $node->field_payment_total[LANGUAGE_NONE][0]['value'] = $payment_due;
  }
}

/**
 * Implements hook_user_login
 * @param $edit
 * @param $account
 *
 * If the user who just signed in has no courses for this semester yet, redirect them to sign up for some courses.
 * Shamelessly adapted form login_destination module
 */
function arava_registration_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
    $mySemesterAPI = new MySemesterAPI();
    $courses = $mySemesterAPI->getAllCoursesForUser();
    if (empty($courses)) {
      $GLOBALS['destination'] = 'registration/course';
    }
  }
}

/**
 * Implements hook_drupal_goto_alter
 * Shamelessly copied form login_destination module
 */
function arava_registration_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if (isset($GLOBALS['destination'])) {
    $destination = $GLOBALS['destination'];

    // alter drupal_goto
    if (is_array($destination)) {
      $path = $destination[0];
      $options = array();
      if (count($destination) > 1) {
        $options = $destination[1];
      }
    }
    else {
      $path = $destination;
    }
  }
}

/**
 * get a view and separate its html into "above", "rows" and "below"
 * @param $view
 * @param $display
 */
function _arava_registration_get_separated_view($view, $display) {
  $view = _arava_registration_generate_view($view, $display);
  $view_parts = explode('<!--rows start-->', $view);
  $above = $view_parts[0];
  $view_parts = explode('<!--rows end-->', $view_parts[1]);
  $below = $view_parts[1];
  $rows = explode('<!--new row-->', $view_parts[0]);
  unset($rows[0]);
  return array(
    'above' => $above,
    'below' => $below,
    'rows' => $rows,
  );
}

/**
 * get a view and separate its html into "above", sections of "rows" and "below"
 * @param $view
 * @param $display
 */
function _arava_registration_get_separated_sectioned_view($view, $display) {
  $view = _arava_registration_generate_view($view, $display);

  $view_parts = explode('<!--section starts-->', $view, 2);
  $above = $view_parts[0];
  $view_parts = explode('<!--rows end-->', $view_parts[1]);
  $below = array_pop($view_parts);

  $separated_sections = array();
  foreach ($view_parts as $section) {
    $section = str_replace('<!--section starts-->', '', $section);

    $section_parts = explode('<!--rows start-->', $section);
    $section_above = $section_parts[0];

    $section_rows = explode('<!--new row-->', $section_parts[1]);
    unset($section_rows[0]);
    $separated_sections[] = array(
      'above' => $section_above,
      'rows' => $section_rows,
    );
  }
  $rows = $separated_sections;


  return array(
    'above' => $above,
    'below' => $below,
    'rows' => $rows,
  );
}

/**
 * @param $view_name
 * @param $display_name
 * @return mixed
 */
function _arava_registration_generate_view($view_name, $display_name, $args = array()) {
	$view = views_get_view($view_name);
	$view->set_display($display_name);
	$view->pre_execute($args);
	return $view->render();
}

/**
 *
 */
function _arava_registration_days_of_week_options() {
  return array(
    'sunday' => t('Sunday'),
    'monday' => t('Monday'),
    'tuesday' => t('Tuesday'),
    'wednesday' => t('Wednesday'),
    'thursday' => t('Thursday'),
    'friday' => t('Friday'),
    'saturday' => t('Saturday'),
  );
}



function arava_registration_mail($key, &$message, $params) {
  switch ($key) {
    case 'confirmation':
      $message['subject'] = variable_get('arava_center_registration_confirmation_email_subject', '');
      $message['body'][] = _arava_registration_confirmation_email();
      break;

    case 'accomodation_confirmation':
      $message['subject'] = variable_get('arava_center_registration_accomodation_confirmation_email_subject', '');
      $message['body'][] = _arava_registration_accomodation_confirmation_email();
      break;

    case 'payment_received':
      $message['subject'] = variable_get('arava_center_registration_payment_received_email_subject', '');
      $message['body'][] = _arava_registration_payment_received_email($params['sum'], $params['confirmation_code'], $params['num_payments']);
      break;
  }
}
