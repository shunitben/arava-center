<?php

/**
 * Implements hook_menu().
 * @return mixed
 */
function arava_admin_menu() {

  $items['admin/arava-admin'] = array(
    'title' => t('Arava Admin'),
    'page callback' => 'arava_admin_page',
    'access arguments' => array('view arava administration reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_admin.admin.inc'
  );

  $items['admin/admin-presence'] = array(
    'title' => t('Administer Presence'),
    'page callback' => 'arava_admin_presence_page',
    'access arguments' => array('view arava administration reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_admin.presence.inc'
  );

  $items['admin/admin-meals'] = array(
    'title' => t('Administer Meals'),
    'page callback' => 'arava_admin_meals_page',
    'access arguments' => array('view arava administration reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'arava_admin.meals.inc'
  );

  $items['admin/send-emails'] = array(
    'title' => t('Send Emails'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_admin_send_emails_form'),
    'access arguments' => array('view arava administration reports'),
    'type' => MENU_CALLBACK,
    'file' => 'arava_admin.send_emails.inc'
  );

  $items['admin/attendance/take'] = array(
    'title' => t('Take attendance'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arava_admin_take_attendance_form'),
    'access arguments' => array('take attendance'),
    'type' => MENU_CALLBACK,
    'file' => 'arava_admin.attendance.inc'
  );



  return $items;
}

/**
 * Implements hook_permission().
 */
function arava_admin_permission() {
  return array(
    'view arava administration reports' => array(
      'title' => t('View Arava administration reports'),
    ),
    'take attendance' => array(
      'title' => t('Take Attendance'),
    ),
    'administer attendance' => array(
      'title' => t('Administer Attendance'),
    )
  );
}

function arava_admin_preprocess_page(&$vars) {
  if (arg(0) == 'user') {
    if (user_access('administer nodes')) {
      module_load_include('inc', 'arava_registration', 'MySemesterAPI.class');
      $mySemesterAPI = new MySemesterAPI(arg(1));
      $mySemesterId = $mySemesterAPI->getMySemesterId();
      drupal_set_message(l(t('Edit user\'s semester'), 'node/' . $mySemesterId . '/edit'), 'status');
    }
  }
  if (!empty($vars['node']) && $vars['node']->type == 'my_semester') {
    if (user_access('administer nodes')) {
      $uid = $vars['node']->field_user[LANGUAGE_NONE][0]['target_id'];
      drupal_set_message(l(t('Edit user\'s personal details'), 'user/' . $uid . '/edit'), 'status');
    }
  }
}

/**
 * Implements hook_block_info
 * @return mixed
 */
function arava_admin_block_info() {
  $blocks['attendance_choose_lesson'] = array(
    'info' => t('Attendance choose lesson'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 * @param string $delta
 * @return mixed
 */
function arava_admin_block_view($delta = '') {
  switch ($delta) {
    case 'attendance_choose_lesson':
      module_load_include('inc', 'arava_admin', 'arava_admin.attendance');
      $block['subject'] = null;
      $form = drupal_get_form('arava_admin_attendance_choose_lesson_form');
      $block['content'] = drupal_render($form);
      break;
  }

  return $block;
}


/**
 * Implements hook_page_build().
 */
function arava_admin_page_build(&$page) {
  if (arg(1) == 'attendance' && arg(2) == 'take') {
    $block = module_invoke('arava_admin', 'block_view', 'attendance_choose_lesson');
    $blocks['attendance_choose_lesson'] = array(
      '#markup' => $block['content'],
      '#weight' => -10,
    );
    $page['content'] = array_merge($blocks, $page['content']);
  }
}

function view_get_link_to_send_emails($view) {
  return l(t('send emails'),
          'admin/send-emails',
          array('query' => array(
            'view' => $view->name,
            'display' => $view->current_display,
            'args' => $view->args))
          );
}


function arava_admin_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_email':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      $message['params']['attachments'] = $params['attachments'];
      break;
  }
}

/******************
 * Batch stuff
 *******************/
/**
 * Batch 'finished' callback
 */
function arava_admin_finished($success, $results, $operations) {
  if (!$success) {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
  else {
    drupal_set_message(t('Emails were sent.'));
  }
  drupal_goto('admin/send-emails', array('query' => $_SESSION['send_emails_redirect']));
}

/**
 * Generic batch operation: called for each request.
 */
function arava_admin_send_emails_op($emails, $params) {
  foreach ($emails as $email) {
    if (!empty($email)) {
      $result = drupal_mail('arava_admin', 'send_email', $email, 'en', $params);
    }
  }
}